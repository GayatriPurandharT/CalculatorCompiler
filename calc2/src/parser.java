
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 26 23:21:43 ICT 2018
//----------------------------------------------------

package src;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 26 23:21:43 ICT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\003\000" +
    "\002\005\005\000\002\005\004\000\002\005\003\000\002" +
    "\002\003\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\006\003" +
    "\000\002\006\003\000\002\002\003\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\022\004\011\005\004\006\016\007\005\010" +
    "\017\012\022\013\006\014\007\001\002\000\016\004\011" +
    "\005\004\006\016\007\005\013\006\014\042\001\002\000" +
    "\016\004\011\005\004\006\016\007\005\013\006\014\042" +
    "\001\002\000\016\004\011\005\004\006\016\007\005\013" +
    "\006\014\042\001\002\000\020\002\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\013\ufff6\014\uffee\001\002\000\020\002" +
    "\ufffd\004\ufffd\005\ufffd\006\032\007\031\011\ufffd\013\030" +
    "\001\002\000\016\004\011\005\004\006\016\007\005\013" +
    "\006\014\042\001\002\000\004\002\055\001\002\000\004" +
    "\002\uffed\001\002\000\006\002\ufff5\014\uffef\001\002\000" +
    "\004\014\047\001\002\000\016\004\011\005\004\006\016" +
    "\007\005\013\006\014\042\001\002\000\010\010\017\012" +
    "\022\014\023\001\002\000\020\002\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\011\ufff9\013\ufff9\001\002\000\010\002" +
    "\001\004\025\005\026\001\002\000\010\010\017\012\022" +
    "\014\023\001\002\000\020\002\ufff6\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\011\ufff6\013\ufff6\001\002\000\020\002\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7\013\ufff7\001" +
    "\002\000\010\010\017\012\022\014\023\001\002\000\010" +
    "\010\017\012\022\014\023\001\002\000\020\002\uffff\004" +
    "\uffff\005\uffff\006\032\007\031\011\uffff\013\030\001\002" +
    "\000\010\010\017\012\022\014\023\001\002\000\010\010" +
    "\017\012\022\014\023\001\002\000\010\010\017\012\022" +
    "\014\023\001\002\000\020\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\011\ufffb\013\ufffb\001\002\000\020\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc\013\ufffc\001" +
    "\002\000\020\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\011\ufffa\013\ufffa\001\002\000\020\002\ufffe\004\ufffe\005" +
    "\ufffe\006\032\007\031\011\ufffe\013\030\001\002\000\010" +
    "\004\025\005\026\011\040\001\002\000\020\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\011\ufff8\013\ufff8\001\002" +
    "\000\016\004\011\005\004\006\016\007\005\013\006\014" +
    "\042\001\002\000\020\002\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\013\uffe6\014\uffe6\001\002\000\020\002\uffe7\004" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\013\uffe7\014\uffe7\001\002" +
    "\000\020\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\013" +
    "\uffea\014\uffea\001\002\000\016\004\uffef\005\uffef\006\uffef" +
    "\007\uffef\013\uffef\014\uffef\001\002\000\016\004\051\005" +
    "\052\006\054\007\053\013\050\014\047\001\002\000\016" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\013\uffee\014\uffee\001" +
    "\002\000\020\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\013\ufff1\014\ufff1\001\002\000\020\002\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\013\ufff4\014\ufff4\001\002\000\020" +
    "\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\013\ufff3\014" +
    "\ufff3\001\002\000\020\002\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\013\ufff0\014\ufff0\001\002\000\020\002\ufff2\004" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\013\ufff2\014\ufff2\001\002" +
    "\000\004\002\000\001\002\000\016\004\011\005\004\006" +
    "\016\007\005\013\006\014\042\001\002\000\020\002\uffec" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\013\uffec\014\uffec\001" +
    "\002\000\016\004\011\005\004\006\016\007\005\013\006" +
    "\014\042\001\002\000\020\002\uffe9\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\013\uffe9\014\uffe9\001\002\000\016\004\011" +
    "\005\004\006\016\007\005\013\006\014\042\001\002\000" +
    "\020\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\013\uffe8" +
    "\014\uffe8\001\002\000\016\004\011\005\004\006\016\007" +
    "\005\013\006\014\042\001\002\000\020\002\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\013\uffeb\014\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\020\002\011\003\020\004\007\005\017\006" +
    "\014\010\013\011\012\001\001\000\006\007\063\011\042" +
    "\001\001\000\006\007\061\011\042\001\001\000\006\007" +
    "\057\011\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\055\011\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\045\010\044" +
    "\001\001\000\006\007\040\011\042\001\001\000\010\003" +
    "\036\004\007\005\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\035\005\017\001\001\000\006" +
    "\004\026\005\017\001\001\000\002\001\001\000\004\005" +
    "\034\001\001\000\004\005\033\001\001\000\004\005\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\043\011\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\045\010\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\056\011" +
    "\042\001\001\000\002\001\001\000\006\007\060\011\042" +
    "\001\001\000\002\001\001\000\006\007\062\011\042\001" +
    "\001\000\002\001\001\000\006\007\064\011\042\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // J ::= NUMBER 
            {
              Token RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
          RESULT = new Token(n, "",n.toString()
                                , n.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // J ::= M 
            {
              Token RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = m;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // M ::= DIVIDE J J 
            {
              Token RESULT =null;
		int j1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int j1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token j1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int j2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int j2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token j2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Token(j1.value/j2.value, "","("+j1.postfix+" "+j2.postfix+ " /)"
                                ,"( "+ j1.infix+ " / "+j2.infix+ " )");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // M ::= NEW J J 
            {
              Token RESULT =null;
		int j1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int j1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token j1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int j2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int j2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token j2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Token((j2.value * j1.value)-(2*j1.value/j2.value), "","("+j1.postfix+" "+j2.postfix+ " ^)"
                                ,"( "+ j1.infix+ " ^ "+j2.infix+ " )");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // M ::= TIMES J J 
            {
              Token RESULT =null;
		int j1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int j1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token j1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int j2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int j2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token j2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Token(j1.value*j2.value, "","("+j1.postfix+" "+j2.postfix+ " *)"
                                ,"( "+ j1.infix+ " * "+j2.infix+ " )");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // M ::= MINUS J J 
            {
              Token RESULT =null;
		int j1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int j1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token j1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int j2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int j2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token j2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Token(j1.value-j2.value, "","("+j1.postfix+" "+j2.postfix+ " -)"
                                ,"( "+ j1.infix+ " - "+j2.infix+ " )");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // M ::= PLUS J J 
            {
              Token RESULT =null;
		int j1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int j1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token j1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int j2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int j2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token j2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            RESULT = new Token(j1.value+j2.value, "","("+j1.postfix+" "+j2.postfix+ " +)"
                                ,"( "+ j1.infix+ " + "+j2.infix+ " )");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // P ::= M 
            {
              Token RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            System.out.println("Evaluation result = " + m.value); 
            System.out.println("Postfix Exp = " + m.postfix);
            System.out.println("Infix Exp = " + m.infix);
            RESULT = m;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // K ::= NUMBER 
            {
              Token RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
          RESULT = new Token(n, n.toString(),""
                                , n.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // K ::= L 
            {
              Token RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = l;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // L ::= K K DIVIDE 
            {
              Token RESULT =null;
		int k1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int k1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token k1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int k2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int k2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token k2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Token(k1.value/k2.value, "(/ "+k1.prefix+" "+k2.prefix+")",""
                                ,"( "+ k1.infix+ " / "+k2.infix+ " )");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // L ::= K K NEW 
            {
              Token RESULT =null;
		int k1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int k1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token k1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int k2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int k2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token k2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Token((k2.value * k1.value)-(2*k1.value/k2.value), "(^ "+k1.prefix+" "+k2.prefix+")",""
                                ,"( "+ k1.infix+ " ^ "+k2.infix+ " )");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // L ::= K K TIMES 
            {
              Token RESULT =null;
		int k1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int k1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token k1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int k2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int k2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token k2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Token(k1.value*k2.value, "(* "+k1.prefix+" "+k2.prefix+")",""
                                ,"( "+ k1.infix+ " * "+k2.infix+ " )");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // L ::= K K MINUS 
            {
              Token RESULT =null;
		int k1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int k1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token k1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int k2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int k2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token k2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Token(k1.value-k2.value, "(- "+k1.prefix+" "+k2.prefix+ ")",""
                                ,"( "+ k1.infix+ " - "+k2.infix + " )");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // L ::= K K PLUS 
            {
              Token RESULT =null;
		int k1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int k1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token k1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int k2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int k2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token k2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
            RESULT = new Token(k1.value+k2.value, "(+ "+k1.prefix+" "+k2.prefix+ ")",""
                                ,"( "+ k1.infix+ " + "+k2.infix+" )");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // P ::= L 
            {
              Token RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            System.out.println("Evaluation result = " + l.value); 
            System.out.println("Prefix Exp = " + l.prefix);
            System.out.println("Infix Exp = " + l.infix);
            RESULT = l;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // F ::= NUMBER 
            {
              Token RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Token(n, n.toString(), n.toString(), "");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // F ::= UNARY F 
            {
              Token RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Token(-f.value, "( -" +f.prefix+" )","( -" +f.postfix+" )","");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // F ::= LPAREN E RPAREN 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // T ::= F 
            {
              Token RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = f;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // T ::= T NEW F 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = new Token((f.value * t.value)-(2*t.value/f.value),  "(^ " +t.prefix+ " " +f.prefix+ ")",
          "("+t.postfix+" "+f.postfix+ " ^)","");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // T ::= T TIMES F 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = new Token(t.value * f.value,  "(* " +t.prefix+ " " +f.prefix+ ")",
          "("+t.postfix+" "+f.postfix+ " *)","");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // T ::= T DIVIDE F 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = new Token(t.value / f.value,  "(/ " +t.prefix+ " " +f.prefix+ ")",
          "("+t.postfix+" "+f.postfix+ " /)","");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= T 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = t;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E ::= E PLUS T 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = new Token(e.value + t.value,  "(+ " +e.prefix+ " " +t.prefix+ ")",
          e.postfix+" "+t.postfix+ " +","");  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= E MINUS T 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = new Token(e.value - t.value, "(- " +e.prefix+ " " +t.prefix+ ")",
          e.postfix+" "+t.postfix+ " -","("+e.infix+ " - (" +t.infix+ "))");    
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= E 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  System.out.println();
            System.out.println("Evaluation result = " + e.value); 
            System.out.println("Prefix Exp = " + e.prefix);
            System.out.println("Posfix Exp = " + e.postfix);
            System.out.println("Infix Exp = " + e.infix);
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

